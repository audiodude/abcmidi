.TH ABC2MIDI 1 "2 May 2004"
.SH NAME
\fBabc2midi\fP \- converts abc file to MIDI file(s)
.SH SYNOPSIS
abc2midi \fIinfile\fP [\fIrefnum\fP] [-c] [-v] [-t] [-n limit] [-RS] [-NAR] [-o outfile]
.SH DESCRIPTION
 The default action is to write a MIDI file for each abc tune
 with the filename <stem>N.mid, where <stem> is the filestem
 of the abc file and N is the tune reference number. If the -o
 option is used, only one file is written. This is the tune
 specified by the reference number or, if no reference number
 is given, the first tune in the file.
.SH OPTIONS
.TP
.B \fIrefnum\fP
process the tune with reference number \fIrefnum\fP
.TP
.B -c
selects checking only
.TP
.B -v
selects verbose option
.TP
.B -t
selects filenames derived from tune titles
.TP
.B -RS
use 3:1 instead of 2:1 for broken rhythms
.TP
.B -NAR
Suppresses the warning 'Assuming repeat'
.TP
.B -n \fI X\fP
limits the length of the file name stem to X characters
.TP
.B -o \fIoutfile\fP
write output to \fIoutfile\fP
.SH FEATURES
.PP
* Broken rythms (>, <), chords, n-tuples, slurring, ties, staccatto notes,
repeats, in-tune tempo/length/time signature changes are all supported.
.PP
* R:hornpipe or r:hornpipe is recognized and note timings are adjusted to
give a broken rhythm (ab is converted to a>b).
.PP
* Most errors in the abc input will generate a suitable error message in
the output and the converter keeps going.
.PP
* Comments and text fields in the abc source are converted to text events
in the MIDI output
.PP
* If guitar chords are present, they are used to generate an accompaniment
in the MIDI output.
.PP
* If there are mis-matched repeat signs in the abc, the program attempts to
fix them. However, it will not attempt this if a multi-part tune 
description has been used or if multiple voices are in use.
.PP
* Karaoke MIDI files can be generated by using the w: field to include 
lyrics.
.PP
* Nonnumeric voice id's, eg. V: soprano, as proposed for the new
abc standard is accepted.
.PP
* Invisible rests specified by x are treated the same way as
normal rests (z).
.PP
.SH LIMITATIONS
* No field is inherited from above the X: field of the tune.


.SH "ABC SYNTAX EXTENSIONS"
* There are some extensions to the abc syntax of the form
.PP
%%MIDI channel n
.PP
These control channel and program selection, transposing and various
other features of abc2midi.
.PP
Each of these should appear on a line by itself. All of them are allowed
within the abc tune body. By using these in combination with the part
notation, one can, for example, play a part transposed or in a different key.
.PP
The idea behind this syntax is that other programs will treat it as a
comment and ignore it.
.PP
%%MIDI channel n
.PP
selects melody channel n (in the range 1-16).
.PP
%%MIDI program [c] n
.PP
selects program n (in the range 1-128) on channel c. If c is not given, the
program is selected on the current melody channel. Most modern tone
generators follow the General MIDI standard which defines the instrument
type for each program number.
.PP
%%MIDI beat a b c n
.PP
controls the way note velocities are selected. The first note in a bar has
velocity a. Other "strong" notes have velocity b and all the rest have velocity
c. a, b and c must be in the range 0-128. The parameter n determines which
notes are "strong". If the time signature is x/y, then each note is given
a position number k = 0, 1, 2 .. x-1 within each bar. Note that the units for
n are not the unit note length. If k is a multiple of n, then the note is
"strong". The volume specifiers !ppp! to !fff! are equivalent to the
following :
.P
!ppp! = %%MIDI beat 30 20 10 1
.br
!pp!  = %%MIDI beat 45 35 20 1
.br
!p!   = %%MIDI beat 60 50 35 1
.br
!mp!  = %%MIDI beat 75 65 50 1
.br
!mf!  = %%MIDI beat 90 80 65 1
.br
!f!   = %%MIDI beat 105 95 80 1
.br
!ff!  = %%MIDI beat 120 110 95 1
.br
!fff! = %%MIDI beat 127 125 110 1

.PP
%%MIDI beatstring <string of f, m and p>
.PP
This provides an alternative way of specifying where the strong and weak
stresses fall within a bar. 'f' means velocity a (normally strong), 'm'
means velocity b (medium velocity) and 'p' means velocity c (soft velocity).
For example, if the time signature is 7/8 with stresses on the first, fourth
and sixth notes in the bar, we could use the following
.PP
%%MIDI beatstring fppmpmp
.PP
%%MIDI transpose n
.PP
transposes the output by the specified number of semitones. n may be
positive or negative.
.PP
%%MIDI rtranspose n
.PP
Relative transpose by the specified number of semitones. i.e.
%%MIDI transpose a followed by %%MIDI rtranspose b results in a
transposition of a+b. %%MIDI transpose b will result in a transposition
of b semitones, regardless of any previous transposition.
.PP
%%MIDI c n
.PP
specifies the MIDI pitch which corresponds to c. The default is 60. This
number should normally be a multiple of 12.
.PP
%%MIDI grace a/b
.PP
sets the fraction of the next note that grace notes will take up. a
must be between 1 and b-1.
.PP
%%MIDI chordname name n1 n2 n3 n4 n5 n6
.PP
Defines how to play a guitar chord called "name". n1 is usually 0 and
n2, n3 to n6 give the pitches of the other notes in semitones relative
to the root note. There may be fewer than 6 notes in the chord, but not
more.If "name" is already defined, this command re-defines it. Unlike
most other commands, chordname definitions stay in effect from where they
are defined to the end of the abc file. The following illustrates how
m, 7, m7 and maj7 could be set up if they were not already defined.
.PP
%%MIDI chordname m 0 3 7
.br
%%MIDI chordname 7 0 4 7 10
.br
%%MIDI chordname m7 0 3 7 10
.br
%%MIDI chordname maj7 0 4 7 11
.PP
%%MIDI gchord string
.PP
sets up how guitar chords are generated. The string is a sequence made of
of z's, c's  f's and b's for rests, chords, fundamental and fundamental
plus chord notes respectively.  This specifies how each bar is to be played.
An optional length is allowed to follow the z's, c's f's and b's  e.g. czf2zf3.
If the abc contains guitar chords, then abc2midi automatically adds chords and
fundamentals after encountering the first guitar chord. It keeps using that
chord until a new chord is specified in the abc. Whenever the M: field is
encountered in the abc, an appropriate default string is set :
.P
For 2/4 or 4/4 time default is equivalent to :
%%MIDI gchord fzczfzcz
.P
For 3/4 time default is equivalent to :
%%MIDI gchord fzczcz
.P
For 6/8 time default is equivalent to :
%%MIDI gchord fzcfzc
.P
For 9/8 time default is equivalent to :
%%MIDI gchord fzcfzcfzc
.P

The gchord command has been extended to allow you to play
the individual notes comprising the guitar chord. This allows
you to play broken chords or arpeggios. The new codes g,h,i,j,
G,H,I,J reference the individual notes starting from the
lowest note of the chord (not necessarily the root in the
case of inversions). For example for the C major chord, g
refers to C, h refers to E and i refers to G. For a gchord
command such as,
.P
%%MIDI gchord ghih
.P
Abc2midi will arpeggiate the C major guitar chord to
CEGE. The upper case letters G,H,I, and J refer to
the same notes except they are transposed down one
octave. Note for the first inversion of the C major
chord (indicated by "C/E"), E would be the lowest
note so g would reference the note E.
.P
Like other gchord codes, you may append a numeral indicating
the duration of the note. The same rules apply as before.
You can use any combination of the gchord codes,
(fcbghijGHIJz).


.PP
%%MIDI chordprog n
.PP
Sets the MIDI instrument for the chords to be n.
.PP
%%MIDI bassprog n
.PP
Sets the MIDI instrument for the bass notes to be n.
.PP
%%MIDI chordvol n
.PP
Sets the volume (velocity) of the chord notes at n.
.PP
%%MIDI bassvol n
.PP
Sets the volume (velocity) of the bass notes at n. There is no corresponding
melodyvol command since there are 3 velocity values for melody, set using the
beat command.
.PP
%%MIDI gchordon
.PP
Turns on guitar chords (they are turned on by default at the start of a
tune).
.PP
%%MIDI gchordoff
.PP
Turns off guitar chords.
.PP
%%MIDI droneon
.PP
Turns on a continuous drone (used in bagpipe music) consisting
of two notes. By default the notes are A, and A,, played
on a bassoon at a velocity of 80. This can be configured
by the %%MIDI drone command described below.
.PP
%%MIDI droneoff
.PP
Turns off the continous drone.
.PP
%%MIDI drone n1 n2 n3 n4 n5
.PP
Sets the drone parameters where n1 is the MIDI program, n2 and
n3 specify the MIDI pitches of the two notes in the chord, and n4 
and n5 specify the MIDI velocities of the two notes.
If you do not set these parameters they are by default
70 45 33 80 80. A value of zero or less indicates that
the setting of this parameter should be left as it is.
.PP
%%MIDI drum string [drum programs] [drum velocities]
.PP
This sets up a drum pattern. The string determines when there is a drum beat
and the drum program values determine what each drum strike sounds like.
.PP
e.g. %%MIDI drum d2zdd 35 38 38  100 50 50
.PP
The string may contain 'd' for a drum strike or 'z' for a rest. By default
a voice starts with no drum pattern and '%%MIDI drumon' is 
needed to enable the drumming. The drum pattern is repeated during
each bar until '%%MIDI drumoff' is encountered. The %%MIDI drum 
command may be used within a tune to change the drum pattern. 
This command places the drum sounds on channel 10 and
assumes your tone generator complies with the General Midi standard - if
it does not, then you may hear tones instead of drum sounds.
.PP
In both the gchord and drum commands, the standard note length of
a single note f,c,z or d is not set by the L: command. Instead it
is adjusted so that the entire gchord string or drum string fits
exactly into one bar. In other words the duration of each note
is divided by the total duration of the string. This means that,
for example, the drum string "dd" is equivalent to drum string "d4d4".
You cannot currently specify fractions directly (eg. C3/2)
as done in the body of the music, but it is still possible to express
complex rhythms. For example, to indicate a rhythm such as
(3ddd d/d/d/d, you would write the string "d4d4d4d3d3d3d3".

.SH "COMPATIBILITY WITH DRAFT STANDARD 2.0"

.PP
The proposed standard introduces a new copyright field
using the syntax

.PP
%%abc-copyright (c) Copyright John Smith 2003

.PP
Abc2midi now inserts this in the MIDI file in the form of a
metatext copyright tag. Changes were made to the event_specific
function in store.c to process the copyright information. It
is also copied into the Karaoke track (if it is created) as
as @T field.

.PP


.SH SEE ALSO
abc2ps(1), midi2abc(1), yaps(1).
.SH AUTHOR
James Allwright <J.R.Allwright@westminster.ac.uk>
.SH SUPPORTED
 by Seymour Shlien <seymour.shlien@crc.ca>
.SH VERSION
This man page describes abc2midi version 1.43,  May 02 2004.
.SH COPYRIGHT
Copyright 1999 James Allwright
.PP
abc2midi is supplied "as is" without any warranty. It
is free software and can be used, copied, modified and
distributed without fee under the terms of the GNU General 
Public License.
.PP
More complete documentation may be found in abcguide.txt
which comes with the abcMIDI distribution.
